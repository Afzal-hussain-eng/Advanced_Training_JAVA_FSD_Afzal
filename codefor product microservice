@EventHandler
	public void on(ProductReservedEvent productReservedEvent) {
		
		ProductEntity productEntity = productRepository.findByProductId(productReservedEvent.getProductId());
		productEntity.setQuantity(productEntity.getQuantity() - productReservedEvent.getQuantity());
		productRepository.save(productEntity);
		
		LOGGER.info("ProductReservedEvent is called for productId: " + productReservedEvent.getProductId() +
				" and orderId: " + productReservedEvent.getOrderId());
		
	}

@Data
@Builder
public class PaymentDetails {

	private final String name;
	private final String cardNumber;
	private final int validUntilMonth;
	private final int validUntilYear;
	private final String cvv;
}


@Data
@Builder
public class User {

	private final String firstName;
	private final String lastName;
	private final String userId;
	private final PaymentDetails paymentDetails;	
}

@Data
@AllArgsConstructor
public class FetchUserPaymentDetailsQuery {

	private String userId;
}


@Component
public class UserEventsHandler {

	@QueryHandler
	public User findUserPaymentDetails(FetchUserPaymentDetailsQuery query) {
		
		PaymentDetails paymentDetails = PaymentDetails.builder()
				.cardNumber("123Card")
				.cvv("123")
				.name("Afzal Hussain Gadag")
				.validUntilMonth(12)
				.validUntilYear(2030)
				.build();
		
		User user = User.builder()
				.firstName("Afzal Hussain")
				.lastName("Gadag")
				.userId(query.getUserId())
				.paymentDetails(paymentDetails)
				.build();
		
		return user;
	}
}

@RestController
@RequestMapping("/users")
public class UsersQueryController {

	@Autowired
	private QueryGateway queryGateway;

	@GetMapping("/{userId}/payments-details")
	public User getUserPaymentDetails(@PathVariable String userId ) {
		
		FetchUserPaymentDetailsQuery query = new FetchUserPaymentDetailsQuery(userId);
		
		return queryGateway.query(query, ResponseTypes.instanceOf(User.class)).join();
	}
}
server.port=0
spring.application.name=users-service

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////day 4
@Data
@Builder
public class ProcessPaymentCommand {

	@TargetAggregateIdentifier
	private final String paymentId;
	private final String orderId;
	private final PaymentDetails paymentDetails;
}

@Value
public class PaymentProcessedEvent {

	private final String orderId;
	private final String paymentId;
}


order saga

@Saga
public class OrderSaga {

	@Autowired
	private transient CommandGateway commandGateway;

	@Autowired
	private transient QueryGateway queryGateway;
	
	private static final Logger LOGGER = LoggerFactory.getLogger(OrderSaga.class);
	
	@StartSaga
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(OrderCreatedEvent orderCreatedEvent) {
		
		ReserveProductCommand reserveProductCommand = ReserveProductCommand.builder()
				.orderId(orderCreatedEvent.getOrderId())
				.quantity(orderCreatedEvent.getQuantity())
				.userId(orderCreatedEvent.getUserId())
				.productId(orderCreatedEvent.getProductId())
				.build();
		
		LOGGER.info("OrderCreatedEvent handled for orderId: " + reserveProductCommand.getOrderId() +
				" and productId: " + reserveProductCommand.getProductId());
		
		commandGateway.send(reserveProductCommand, new CommandCallback<ReserveProductCommand, Object>() {
		
			@Override
			public void onResult(CommandMessage<? extends ReserveProductCommand> commandMessage,
					CommandResultMessage<? extends Object> commandResultMessage) {

				if (commandResultMessage.isExceptional()) {
					// Start a compensating transaction
				}
			}
		});
	}
	
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(ProductReservedEvent productReservedEvent) {
		
		// Process User Payment
		LOGGER.info("ProductReservedEvent is called for productId: " + productReservedEvent.getOrderId() +
				" and orderId: " + productReservedEvent.getOrderId());
		
		FetchUserPaymentDetailsQuery fetchUserPaymentDetailsQuery = 
				new FetchUserPaymentDetailsQuery(productReservedEvent.getUserId());
		
		User userPaymentDetails = null;
		
		try {
			userPaymentDetails = queryGateway.query(fetchUserPaymentDetailsQuery, 
				ResponseTypes.instanceOf(User.class)).join();
		}catch (Exception ex) {
			LOGGER.error(ex.getMessage());
			// Start a compensating transaction
			return;
		}
		
		if (userPaymentDetails == null) {
			// Start a compensating transaction
			return;
		}
		
		LOGGER.info("Successfully fetched user payment details for user: " + userPaymentDetails.getFirstName());

		ProcessPaymentCommand processPaymentCommand = ProcessPaymentCommand.builder()
				.orderId(productReservedEvent.getOrderId())
				.paymentDetails(userPaymentDetails.getPaymentDetails())
				.paymentId(UUID.randomUUID().toString())
				.build();
		
		String result = null;
		try {
			result = commandGateway.sendAndWait(processPaymentCommand, 10, TimeUnit.SECONDS);
		}catch (Exception ex) {
			LOGGER.error(ex.getMessage());
			// Start a compensating transaction
		}
		
		if (result == null) {
			LOGGER.info("The ProcessPaymentCommand resulted in Null.class Initiating a compensating TX");
			// Start a compensating transaction
		}
		
	}
	
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(PaymentProcessedEvent paymentProcessedEvent) {
		
		//Send an ApproveOrderCommand
		
		ApproveOrderCommand approveOrderCommand = 
				new ApproveOrderCommand(paymentProcessedEvent.getOrderId());
		
		commandGateway.send(approveOrderCommand);
	}
	
	@EndSaga
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(OrderApprovedEvent orderApprovedEvent) {
		
		LOGGER.info("Order is approved. Order Saga is complete for orderId: " 
				+ orderApprovedEvent.getOrderId());
		// SagaLifecycle.end();
	}
}

payment aggregate class in com.afzal.command

@Aggregate
public class PaymentAggregate {

	@AggregateIdentifier
	private String paymentId;
	private String orderId;
	
	public PaymentAggregate() {
	}
	
	@CommandHandler
	public PaymentAggregate(ProcessPaymentCommand processPaymentCommand) {
		
		if(processPaymentCommand.getPaymentDetails() == null) {
			throw new IllegalArgumentException("Missing payment details");
		}
		if(processPaymentCommand.getOrderId() == null) {
			throw new IllegalArgumentException("Missing orderId");
		}
		if(processPaymentCommand.getPaymentId() == null) {
			throw new IllegalArgumentException("Missing paymentId");
		}
		
		// BL
		
		AggregateLifecycle.apply(new PaymentProcessedEvent(processPaymentCommand.getOrderId(),
				processPaymentCommand.getPaymentId()));
	}
	
	@EventSourcingHandler
	public void on(PaymentProcessedEvent paymentProcessedEvent) {
		this.paymentId = paymentProcessedEvent.getPaymentId();
		this.orderId = paymentProcessedEvent.getOrderId();
	}
}
payment entity in com.afzal.data
@Data
@Entity
@Table(name = "payments")
public class PaymentEntity implements Serializable {
	
	private static final long serialVersionUID = -5365497269424757005L;

	@Id
	private String paymentId;

	@Column
	private String orderId;
}

payment repository in com.afzal.data
public interface PaymentRepository extends JpaRepository<PaymentEntity, String>{

}
paymenteventhandler in com.afzal.events
@Component
public class PaymentEventsHandler {

	private final Logger LOGGER = LoggerFactory.getLogger(PaymentEventsHandler.class);
	private final PaymentRepository paymentRepository;
	
	public PaymentEventsHandler(PaymentRepository paymentRepository) {
		this.paymentRepository = paymentRepository;
	}
	
	@EventHandler
	public void on(PaymentProcessedEvent event) {
		
		LOGGER.info("PaymentProcessedEvent is called for orderId: " + event.getOrderId());
		
		PaymentEntity paymentEntity = new PaymentEntity();
		BeanUtils.copyProperties(event, paymentEntity);
		
		paymentRepository.save(paymentEntity);
	}
}

app.prop
server.port=0
spring.application.name=payments-service

spring.h2.console.settings.web-allow-others=true

spring.datasource.url=jdbc:h2:mem:paymentdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

#Accessing the H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
///////////////////////////////////day 4 evening changes
in core microservice

com.afzal.core.commands;

@Data
@Builder
public class CancelProductReservationCommand {

	@TargetAggregateIdentifier
	private final String productId;
	private final int quantity;
	private final String orderId;
	private final String userId;
	private final String reason;
}

in order saga @endsaga
	@EndSaga
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(OrderRejectedEvent orderRejectedEvent) {
		
		LOGGER.info("Successfully reject order with id : " + orderRejectedEvent.getOrderId());
	}
	
	private void cancelProductReservation(ProductReservedEvent productReservedEvent, String reason) {
		
		CancelProductReservationCommand cancelProductReservationCommand = 
				CancelProductReservationCommand.builder()
				.orderId(productReservedEvent.getOrderId())
				.productId(productReservedEvent.getProductId())
				.quantity(productReservedEvent.getQuantity())
				.userId(productReservedEvent.getUserId())
				.reason(reason)
				.build();
		
		commandGateway.send(cancelProductReservationCommand);
	}
in @sagaeventhandler hadle productreserved event

	User userPaymentDetails = null;
		
		try {
			userPaymentDetails = queryGateway.query(fetchUserPaymentDetailsQuery, 
				ResponseTypes.instanceOf(User.class)).join();
		}catch (Exception ex) {
			LOGGER.error(ex.getMessage());
			// Start a compensating transaction
			cancelProductReservation(productReservedEvent, ex.getMessage());
			return;
		}

create ProductReservationCancelledEvent class in core project
@Data
@Builder
public class ProductReservationCancelledEvent {

	private final String productId;
	private final int quantity;
	private final String orderId;
	private final String userId;
	private final String reason;
}


inproduct service product aggregate commamd handle the CancelProductReservationCommand
@CommandHandler
	public void handle(CancelProductReservationCommand cancelProductReservationCommand) {
		
		ProductReservationCancelledEvent productReservationCancelledEvent =
				ProductReservationCancelledEvent.builder()
				.orderId(cancelProductReservationCommand.getOrderId())
				.productId(cancelProductReservationCommand.getProductId())
				.quantity(cancelProductReservationCommand.getQuantity())
				.reason(cancelProductReservationCommand.getReason())
				.userId(cancelProductReservationCommand.getUserId())
				.build();
		
		AggregateLifecycle.apply(productReservationCancelledEvent);
	}
	
	@EventSourcingHandler
	public void on(ProductReservationCancelledEvent productReservationCancelledEvent) {
		
		this.quantity += productReservationCancelledEvent.getQuantity();
	}
}


		
		if (userPaymentDetails == null) {
			// Start a compensating transaction
			cancelProductReservation(productReservedEvent, "Could not fetch user payment details");
			return;
		}
		
		LOGGER.info("Successfully fetched user payment details for user: " + userPaymentDetails.getFirstName());

		ProcessPaymentCommand processPaymentCommand = ProcessPaymentCommand.builder()
				.orderId(productReservedEvent.getOrderId())
				.paymentDetails(userPaymentDetails.getPaymentDetails())
				.paymentId(UUID.randomUUID().toString())
				.build();
		
		String result = null;
		try {
			result = commandGateway.sendAndWait(processPaymentCommand, 10, TimeUnit.SECONDS);
		}catch (Exception ex) {
			LOGGER.error(ex.getMessage());
			// Start a compensating transaction
			cancelProductReservation(productReservedEvent, ex.getMessage());
		}
		
		if (result == null) {
			LOGGER.info("The ProcessPaymentCommand resulted in Null.class Initiating a compensating TX");
			// Start a compensating transaction
			cancelProductReservation(productReservedEvent, "Could not process used payment with provided payment details.");
		}
		
	}

create a handler method in productevent handler in product service project
@EventHandler
	public void on(ProductReservationCancelledEvent productReservationCancelledEvent) {
		
		ProductEntity currentlyStoredProduct =
				productRepository.findByProductId(productReservationCancelledEvent.getProductId());
		
		int newQuantity = currentlyStoredProduct.getQuantity() + productReservationCancelledEvent.getQuantity();
		currentlyStoredProduct.setQuantity(newQuantity);
		
		productRepository.save(currentlyStoredProduct);
	}

in oredr saga
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(ProductReservationCancelledEvent productReservationCancelledEvent) {
		
		// Create and send a RejectOrderCommand
		RejectOrderCommand rejectOrderCommand = new RejectOrderCommand(
				productReservationCancelledEvent.getOrderId(),
				productReservationCancelledEvent.getReason());
		
		commandGateway.send(rejectOrderCommand);
	}

create a reject order commamd in order service 
@Value
public class RejectOrderCommand {

	@TargetAggregateIdentifier
	private final String orderId;
	private final String reason;
}
add this in handle order create event
if (commandResultMessage.isExceptional()) {
					
					// Start a compensating transaction
					RejectOrderCommand rejectOrderCommand = new RejectOrderCommand(
							orderCreatedEvent.getOrderId(),
							commandResultMessage.exceptionResult().getMessage());
					
					commandGateway.send(rejectOrderCommand);
				}

create a command handler in order aggregate class
@CommandHandler
	public void handle(RejectOrderCommand rejectOrderCommand) {
		
		// BL
		
		// Create and publish the OrderRejectEvent
		OrderRejectedEvent orderRejectedEvent = new OrderRejectedEvent(
				rejectOrderCommand.getOrderId(), rejectOrderCommand.getReason());
		
		AggregateLifecycle.apply(orderRejectedEvent);
	}
	
	@EventSourcingHandler
	public void on(OrderRejectedEvent orderRejectedEvent) {
		
		this.orderStatus = orderRejectedEvent.getOrderStatus();
	}
}
create a order erject event in event package
@Value
public class OrderRejectedEvent {

	private final String orderId;
	private final String reason;
	private OrderStatus orderStatus = OrderStatus.REJECTED;
}
publis the order reject hadler
handle the order reject event in  orderevent handler 
@EventHandler
	public void on(OrderRejectedEvent event) throws Exception {
		
		OrderEntity orderEntity = orderRepository.findByOrderId(event.getOrderId());
		
		orderEntity.setOrderStatus(event.getOrderStatus());
		
		orderRepository.save(orderEntity);
	}
handle the order reject event handler in order saga 
@EndSaga
	@SagaEventHandler(associationProperty = "orderId")
	public void handle(OrderRejectedEvent orderRejectedEvent) {
		
		LOGGER.info("Successfully reject order with id : " + orderRejectedEvent.getOrderId());
	}
	



